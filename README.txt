
============================
1.Структура
	1.1. Структура header файлов
	1.2. Структура cpp файлов
2. Алгоритм решения
	2.1. Классы и методы
	2.2. Реализация армии
3. Используемые библиотеки
============================


1. Структура //==============
	Здесь идет пояснение к описанию файлов (объявление, определение и т.д)
	
	1.1. HEADERS
		Каждый header (исключая sown.h) включает себя объявление классов, его полей и методов.
		Сначала объявляются приватные поля (если есть), потом get'еры/set'еры (если есть), другие функции (если есть).
		Далее protected поля (если есть), get'еры/set'еры (если есть), другие функции (если есть).
		Далее публичные поля (если есть), конструкторы/деконструкторы, get'еры/set'еры (если есть), другие функции (если есть).
	1.2. CPP
		Точно такой же порядок, как в header файлах:
		Конструкторы/деконструкторы, get'еры/set'еры (если есть), другие функции (если есть).
========================================

2. Алгоритм решения //================

	2.1. КЛАССЫ И МЕТОДЫ

		Создаются отдельные базовые классы Armor, Ammo.
		get'еры/set'еры для названия, защиты у брони и атаки у снарядов, названии умения у снарядов.
		set'eр у названия сделан protected, т.к. только дети классов должны устанавливать значение названия.

		Далее классы-дети под каждый вид Armor:
			NoneArmor // для указания, что юнит не может иметь броню
				name = "NoneArmor"
				def = 0
			IronArmor
				name = "IronArmor"
				def = 25 // см 
		Виды Ammo:
			NoneAmmo // для указания, что юнит не может иметь снарядов
				name = "NoneAmmo"
				skillName = "None"
				dmg = 0
			Stone
				name = "Stone"
				skillName = ...
				dmg = ...
			Bullet
				name = "Bullet"
				skillName = ...
				dmg = ...

		После идет главный базовый тип Unit, в котором объявлены:
			name // для названия юнита
			





